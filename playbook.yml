---
- hosts: all
  become: true
  vars:
    fann_version: "2.2.0"
    home_directory: "/home/vagrant"
    default_user: vagrant
    max_epochs: 5000000
    desired_error: 0.000000001
    nueron_layers: [1, 2, 1]
    learning_data: [[[0],[0]],[[1],[1]],[[2],[1]],[[3],[0]]]

  roles:
     - alban.andrieu.cmake

  tasks: 
    - name: Install unzip
      apt: 
        pkg: unzip
        state: present

    - name: Install build-essential
      apt:
        pkg: build-essential
        state: present

    - name: unarchive fann download
      unarchive:
        src: http://sourceforge.net/projects/fann/files/fann/{{ fann_version }}/FANN-{{ fann_version }}-Source.zip/download
        dest: "{{ home_directory }}"
        remote_src: yes
        creates: "{{ home_directory }}/FANN-{{ fann_version }}-Source"

    - name: run cmake for fann
      command: "/usr/bin/cmake ."
      args:
        chdir: "{{ home_directory }}/FANN-{{ fann_version }}-Source/"
        creates: "{{ home_directory }}/FANN-{{ fann_version }}-Source/Makefile"
      become: yes

    - name: run make for fann
      make: 
        chdir: "{{ home_directory }}/FANN-{{ fann_version }}-Source"
      become: yes

    - name: run cmake for fann
      command: "/usr/bin/cmake ."
      args:
        chdir: "{{ home_directory }}/FANN-{{ fann_version }}-Source/"
      become: yes

    - name: run make install for fann
      command: "/usr/bin/make . install"
      args:
        chdir: "{{ home_directory }}/FANN-{{ fann_version }}-Source/"
      become: yes

    - name: create test folder
      file:
        path: "{{ home_directory }}/test"
        owner: "{{ default_user }}"
        group: "{{ default_user }}"
        mode: 0744
        state: directory

    - name: test programs
      template:
        src: templates/{{ item }}.j2
        dest: "{{ home_directory }}/test/{{ item }}"
        owner: "{{ default_user }}"
        group: "{{ default_user }}"
        mode: 0744
      with_items:
        - "main.c"
        - "trained.c"
        - "xor.data"

    - name: run ldconfig
      command: "ldconfig"
      become: yes

    - name: compile program to generate net
      command: "/usr/bin/gcc main.c -lfann -lm -o main"
      args:
        chdir: "{{ home_directory }}/test/"

    - name: compile program to run trained net
      command: "/usr/bin/gcc trained.c -lfann -lm -o trained"
      args:
        chdir: "{{ home_directory }}/test/"

    - name: run the training
      command: "./main"
      args:
        chdir: "{{ home_directory }}/test/"

    - name: run the network 
      command: "./trained"
      args:
        chdir: "{{ home_directory }}/test/"
